#!/bin/bash -x

oper=${1:-'add'}
step=${2:-'pair_with_old'}

issu_api_server_ip=${issu_api_server_ip:-<%= @host_ip %>}
issu_api_server_port=${issu_api_server_port:-8082}

issu_ips_list_space="${issu_ips_list_space:-<%= @issu_ips_list_space %>}"

old_api_server_ip=${old_api_server_ip:-<%= @first_old_config_server_ip %>}
old_api_server_port=${old_api_server_port:-<%= @api_port %>}

old_control_servers_list_space="${old_control_servers_list_space:-<%= @old_control_servers_list_space %>}"
old_analyticsdb_servers_list_space="${old_analyticsdb_servers_list_space:-<%= @old_analyticsdb_servers_list_space %>}"
old_analytics_servers_list_space="${old_analytics_servers_list_space:-<%= @old_analytics_servers_list_space %>}"


admin_password=${admin_password:-<%= @admin_password %>}
admin_tenant_name=${admin_tenant_name:-<%= @admin_tenant_name %>}
admin_user=${admin_user:-<%= @admin_user %>}

router_asn=${router_asn:-<%= @router_asn %>}

ibgp_auto_mesh=${ibgp_auto_mesh:-<%= @ibgp_auto_mesh %>}

control_container_id=${control_container_id:-`sudo docker ps | awk '/control_nodemgr/{print $1}' | head -n 1`}
config_container_id=${control_container_id:-`sudo docker ps | awk '/config_nodemgr/{print $1}' | head -n 1`}
analytics_container_id=${analytics_container_id:-`sudo docker ps | awk '/analytics_nodemgr/{print $1}' | head -n 1`}
analyticsdb_container_id=${analyticsdb_container_id:-`sudo docker ps | awk '/analytics_database_nodemgr/{print $1}' | head -n 1`}


AUTH_PARAMS="--admin_password $admin_password"
AUTH_PARAMS+=" --admin_tenant_name $admin_tenant_name"
AUTH_PARAMS+=" --admin_user $admin_user"

asn_opts="--router_asn $router_asn"

bgp_auto_mesh_opts=''
if [[ ${ibgp_auto_mesh,,} == 'true' ]] ; then
  bgp_auto_mesh_opts="--ibgp_auto_mesh"
fi

working_dir=${working_dir:-'/tmp/contrail_issu'}
mkdir -p "$working_dir"

function resolve_name() {
  local ip=$1
  local old=$2

  if [[ "$old" == 'pair_with_old' ]] ; then
    local ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ssh -i ~/.ssh/issu_id_rsa $ssh_opts heat-admin@${ip} uname -n
  else
    resolveip -s $ip
  fi
}

function proviosion() {
  local ip=$1
  shift 1
  local name=$1
  shift 1
  local api=$1
  shift 1
  local port=$1
  shift 1
  local provision_script=$1
  shift 1
  local container_id=$1
  shift 1
  local opts="$@"

  cat << EOF > ${working_dir}/provision_issu.sh
#!/bin/bash -x
LOG_LEVEL=SYS_NOTICE
source /common.sh
set_third_party_auth_config
set_vnc_api_lib_ini
python /opt/contrail/utils/${provision_script} --host_name $name \
  --host_ip $ip \
  --api_server_ip $api \
  --api_server_port $port \
  --oper $oper \
  $AUTH_PARAMS $opts
EOF
  chmod +x ${working_dir}/provision_issu.sh
  sudo docker cp ${working_dir}/provision_issu.sh ${container_id}:/
  sudo docker exec -it $container_id /provision_issu.sh
}

function proviosion_control() {
  local ip=$1
  local name=$2
  local api=$3
  local port=$4
  local use_old_script=$5

  if [[ -n "$use_old_script" ]] ; then
    local ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    cat << EOF | ssh -i ~/.ssh/issu_id_rsa $ssh_opts heat-admin@${api}
set -x
sudo python /opt/contrail/utils/provision_control.py --host_name $name \
  --host_ip $ip \
  --api_server_ip $api \
  --api_server_port $port \
  --oper $oper \
  $asn_opts $bgp_auto_mesh_opts $AUTH_PARAMS
EOF
    return $?
  fi

  proviosion $ip $name $api $port provision_control.py $control_container_id $asn_opts $bgp_auto_mesh_opts
}

if [[ "$oper" == 'add' && "$step" == 'pair_with_old' ]] ; then
  #Stop containers:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
  for i in $(sudo docker ps |grep 'config_devicemgr\|config_schema\|config_svcmonitor' | awk '{print($1)}') ; do
    sudo docker stop $i
  done
fi

if [[ "$oper" == 'add' && "$step" == 'pair_with_new' ]] ; then
  #Stop containers on newly deployd cluster:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
  for ip in $old_control_servers_list_space ; do
    ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    cat << EOF | ssh -i ~/.ssh/issu_id_rsa $ssh_opts heat-admin@${ip}
set -x
for i in \$(sudo docker ps |grep 'config_device_manager\|config_schema\|config_svc_monitor' | awk '{print(\$1)}') ; do
  sudo docker stop \$i
done
EOF
  done

  #Start containers on ISSU:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
  for i in $(sudo docker ps --all | grep 'config_devicemgr\|config_schema\|config_svcmonitor' | awk '{print($1)}') ; do
    sudo docker start $i
  done
fi

#Pair control nodes with issu node.
for ip in $old_control_servers_list_space ; do
  name=$(resolve_name $ip $step)
  proviosion_control $ip $name $issu_api_server_ip $issu_api_server_port || {
    echo "ERROR: failed to provision old control node $ip in ISSU cluster"
    exit -1
  }
done

#Pair issu control nodes in with cluster with similar command (call on old contrail controller node)
use_old_script='true'
[[ "$step"  != 'pair_with_old' ]] && use_old_script=''
for ip in $issu_ips_list_space ; do
  name=$(resolve_name $ip)
  proviosion_control $ip $name $old_api_server_ip $old_api_server_port $use_old_script || {
    echo "ERROR: failed to provision ISSU control node $ip in old cluster $old_api_server_ip:$old_api_server_port"
    exit -1
  }
done

if [[ "$oper" == 'del' && "$step" == 'pair_with_new' ]] ; then
  #Start containers on newly deployd cluster:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
  for ip in $old_control_servers_list_space ; do
    ssh_opts='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    cat << EOF | ssh -i ~/.ssh/issu_id_rsa $ssh_opts heat-admin@${ip}
set -x
for i in \$(sudo docker ps --all | grep 'config_device_manager\|config_schema\|config_svc_monitor' | awk '{print(\$1)}') ; do
  sudo docker start \$i
done
EOF
  done

  sleep 10

  # remove old config, analytics & analytics db nodes registered by short host name
  for ip in $old_control_servers_list_space ; do
    name=$(resolve_name $ip pair_with_old)
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_config_node.py $config_container_id
  done
  for ip in $old_analytics_servers_list_space ; do
    name=$(resolve_name $ip pair_with_old)
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_analytics_node.py $analytics_container_id
  done
  for ip in $old_analyticsdb_servers_list_space ; do
    name=$(resolve_name $ip pair_with_old)
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_database_node.py $analyticsdb_container_id
  done

  # remove ISSU node components from the cluster (they were synced by revers issu sync)
  for ip in $old_control_servers_list_space ; do
    name=$(resolve_name $ip $step)
    # config
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_config_node.py $config_container_id
    # analytics
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_analytics_node.py $analytics_container_id
    # analytics db
    proviosion $ip $name $old_api_server_ip $old_api_server_port provision_database_node.py $analyticsdb_container_id
  done
fi
