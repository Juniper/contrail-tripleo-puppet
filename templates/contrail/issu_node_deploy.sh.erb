#!/bin/bash -x

container_registry=<%= @container_registry %>
container_tag=<%= @container_tag %>
ansible_deployer_image=${ansible_deployer_image:-"${container_registry}/contrail-kolla-ansible-deployer:${container_tag}"}

new_api_server_ip=${new_api_server_ip:-<%= @host_ip %>}
new_api_server_port=${new_api_server_port:-8082}

old_api_server_ip=${old_api_server_ip:-<%= @api_server %>}
old_api_server_port=${old_api_server_port:-<%= @api_port %>}

old_control_servers_list_space="${old_control_servers_list_space:-<%= @control_servers_list_space %>}"
issu_ips_list_space="${issu_ips_list_space:-<%= @issu_ips_list_space %>}"

admin_password=${admin_password:-<%= @admin_password %>}
admin_tenant_name=${admin_tenant_name:-<%= @admin_tenant_name %>}
admin_user=${admin_user:-<%= @admin_user %>}

router_asn=${router_asn:-<%= @router_asn %>}

ibgp_auto_mesh=${ibgp_auto_mesh:-<%= @ibgp_auto_mesh %>}

AUTH_PARAMS="--admin_password $admin_password"
AUTH_PARAMS+=" --admin_tenant_name $admin_tenant_name"
AUTH_PARAMS+=" --admin_user $admin_user"

asn_opts="--router_asn $router_asn"

bgp_auto_mesh_opts=''
if [[ ${ibgp_auto_mesh,,} == 'true' ]] ; then
  bgp_auto_mesh_opts="--ibgp_auto_mesh"
fi

docker run --rm -it --network host \
   -v /etc/contrail/issu/instances_issu.yaml:/root/contrail-ansible-deployer/config/instances.yaml \
   --entrypoint /bin/bash \
   -c "cd /root/contrail-ansible-deployer; ansible-playbook --verbose -v -e orchestrator=openstack -i inventory/ playbooks/install_contrail.yml" \
   $ansible_deployer_image

if [[ $? != 0 ]] ; then
  echo "ERROR: failed to run deploy issu Contrail Controller node"
  exit -1
fi

config_api_image=`docker ps | awk '/config_api/{print $1}' | head`

function resolve_short_name() {
    # puppet use $::hostname for node provisioning which is a short name
    resolveip -s $ip | cut -d '.' -f 1
}

function proviosion_control(){
  local ip=$1
  local api=$2
  local port=$3
  local name=$(resolve_short_name $ip)
  docker exec -it $config_api_image /bin/bash -c "LOG_LEVEL=SYS_NOTICE source /common.sh ; python /opt/contrail/utils/provision_control.py --host_name $name --host_ip $ip --api_server_ip $api --api_server_port $port --oper add $asn_opts $bgp_auto_mesh_opts $AUTH_PARAMS"
}

#Pair old control nodes in new cluster (call on issu node).
for ip in $old_control_servers_list_space ; do
  proviosion_control $ip $new_api_server_ip $new_api_server_port
done

#Pair new control nodes in old cluster with similar command (call on old contrail controller node)
for ip in $issu_ips_list_space ; do
  proviosion_control $ip $old_api_server_ip $old_api_server_port
done

Stop containers:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
for i in $(docker ps |grep 'config_devicemgr\|config_schema\|config_svcmonitor' | awk '{print($1)}') ; do
  docker stop $i
done

docker run --rm -it --network host \
   -v /etc/contrail/contrail-issu.conf:/etc/contrail/contrail-issu.conf \
   -v /root/.ssh:/root/.ssh \
   --entrypoint /bin/bash \
   -c "/usr/bin/contrail-issu-pre-sync -c /etc/contrail/contrail-issu.conf" \
   $config_api_image 

if [[ $? != 0 ]] ; then
  echo "ERROR: failed to run issu pre-sync"
  exit -1
fi

docker run --rm --detach -it --network host --name issu-run-sync \
  -v /etc/contrail/contrail-issu.conf:/etc/contrail/contrail-issu.conf \
  -v /root/.ssh:/root/.ssh
  --entrypoint /bin/bash \
  -c "/usr/bin/contrail-issu-run-sync -c /etc/contrail/contrail-issu.conf" \
  $config_api_image 
