#!/bin/bash -x

new_api_server_ip=${new_api_server_ip:-<%= @host_ip %>}
new_api_server_port=${new_api_server_port:-8082}

old_api_server_ip=${old_api_server_ip:-<%= @api_server %>}
old_api_server_port=${old_api_server_port:-<%= @api_port %>}

old_control_servers_list_space="${old_control_servers_list_space:-<%= @control_servers_list_space %>}"
issu_ips_list_space="${issu_ips_list_space:-<%= @issu_ips_list_space %>}"

admin_password=${admin_password:-<%= @admin_password %>}
admin_tenant_name=${admin_tenant_name:-<%= @admin_tenant_name %>}
admin_user=${admin_user:-<%= @admin_user %>}

router_asn=${router_asn:-<%= @router_asn %>}

ibgp_auto_mesh=${ibgp_auto_mesh:-<%= @ibgp_auto_mesh %>}

container_registry=${container_registry:-<%= @container_registry %>}
container_tag=${container_tag:-<%= @container_tag %>}
config_api_image=${ansible_deployer_image:-"${container_registry}/contrail-controller-config-api:${container_tag}"}

issu_config=${issu_config:-'issu.conf'}
issu_config_file=$(echo "$issu_config" | awk -F '/' '{print($NF)}')

AUTH_PARAMS="--admin_password $admin_password"
AUTH_PARAMS+=" --admin_tenant_name $admin_tenant_name"
AUTH_PARAMS+=" --admin_user $admin_user"

asn_opts="--router_asn $router_asn"

bgp_auto_mesh_opts=''
if [[ ${ibgp_auto_mesh,,} == 'true' ]] ; then
  bgp_auto_mesh_opts="--ibgp_auto_mesh"
fi

working_dir=${working_dir:-'/tmp/contrail_issu'}
ssh_dir="$working_dir/ssh"

mkdir -p "$working_dir"
mkdir -p "$ssh_dir"

cp -f "$issu_config" "${working_dir}/"


function resolve_short_name() {
    # puppet use $::hostname for node provisioning which is a short name
    resolveip -s $ip | cut -d '.' -f 1
}

function proviosion_control(){
  local ip=$1
  local api=$2
  local port=$3
  local name=$(resolve_short_name $ip)

  cat << EOF > ${working_dir}/entrypoint.sh
#!/bin/bash -x
LOG_LEVEL=SYS_NOTICE
source /common.sh
python /opt/contrail/utils/provision_control.py --host_name $name \
  --host_ip $ip \
  --api_server_ip $api \
  --api_server_port $port \
  --oper add \
  $asn_opts $bgp_auto_mesh_opts $AUTH_PARAMS
EOF
  chmod +x ${working_dir}/entrypoint.sh

  docker run --rm -it --network host --name issu-run-sync \
    -v "$working_dir":"$working_dir" \
    --entrypoint ${working_dir}/entrypoint.sh \
    $config_api_image 
}

#Pair old control nodes in new cluster (call on issu node).
for ip in $old_control_servers_list_space ; do
  proviosion_control $ip $new_api_server_ip $new_api_server_port
done

#Pair new control nodes in old cluster with similar command (call on old contrail controller node)
for ip in $issu_ips_list_space ; do
  proviosion_control $ip $old_api_server_ip $old_api_server_port
done

Stop containers:  contrail-device-manager, contrail-schema-transformer, contrail-svcmonitor:
for i in $(docker ps |grep 'config_devicemgr\|config_schema\|config_svcmonitor' | awk '{print($1)}') ; do
  docker stop $i
done

cat << EOF > ${working_dir}/entrypoint.sh
#!/bin/bash -x
mkdir -p ~/.ssh
chmod 700 ~/.ssh
cp ${ssh_dir}/* ~/.ssh/
chown -R root:root ~/.ssh
/usr/bin/contrail-issu-pre-sync -c $working_dir/$issu_config_file
EOF
chmod +x ${working_dir}/entrypoint.sh

docker run --rm -it --network host \
  -v "$working_dir":"$working_dir" \
  --entrypoint ${working_dir}/entrypoint.sh \
  $config_api_image 

if [[ $? != 0 ]] ; then
  echo "ERROR: failed to run issu pre-sync"
  exit -1
fi

cat << EOF > ${working_dir}/entrypoint.sh
#!/bin/bash -x
/usr/bin/contrail-issu-run-sync -c $working_dir/$issu_config_file
EOF
chmod +x ${working_dir}/entrypoint.sh

docker run --rm --detach -it --network host --name issu-run-sync \
  -v "$working_dir":"$working_dir" \
  --entrypoint ${working_dir}/entrypoint.sh \
  $config_api_image 
